"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_lib_gemini_ts";
exports.ids = ["_ssr_lib_gemini_ts"];
exports.modules = {

/***/ "(ssr)/./lib/gemini.ts":
/*!***********************!*\
  !*** ./lib/gemini.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateRecommendations: () => (/* binding */ generateRecommendations)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(ssr)/./node_modules/@google/generative-ai/dist/index.mjs\");\n\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(\"AIzaSyATy2lW3kQ0LeBVi7S5ZNoAdlUL-ZYJaY0\" || 0);\nconst generateRecommendations = async (preferences, watchHistory, surpriseMe = false)=>{\n    try {\n        const model = genAI.getGenerativeModel({\n            model: \"gemini-2.5-flash\"\n        });\n        const prompt = buildPrompt(preferences, watchHistory, surpriseMe);\n        const result = await model.generateContent(prompt);\n        const response = await result.response;\n        const text = response.text();\n        // Clean the response text to extract JSON\n        let jsonText = text.trim();\n        // Remove markdown code blocks if present\n        if (jsonText.startsWith(\"```json\")) {\n            jsonText = jsonText.replace(/^```json\\s*/, \"\").replace(/\\s*```$/, \"\");\n        } else if (jsonText.startsWith(\"```\")) {\n            jsonText = jsonText.replace(/^```\\s*/, \"\").replace(/\\s*```$/, \"\");\n        }\n        // Try to find JSON object in the response\n        const jsonMatch = jsonText.match(/\\{[\\s\\S]*\\}/);\n        if (jsonMatch) {\n            jsonText = jsonMatch[0];\n        }\n        // Parse the JSON response\n        const parsedResponse = JSON.parse(jsonText);\n        return parsedResponse.recommendations || [];\n    } catch (error) {\n        console.error(\"Error generating recommendations:\", error);\n        throw new Error(\"Failed to generate recommendations. Please try again.\");\n    }\n};\nconst buildPrompt = (preferences, watchHistory, surpriseMe)=>{\n    const watchHistoryText = watchHistory.length > 0 ? `\\n\\nWatch History (with ratings):\\n${watchHistory.map((movie)=>`- ${movie.title} (${movie.year}) - Rating: ${movie.rating}/10`).join(\"\\n\")}` : \"\\n\\nNo watch history available.\";\n    const surpriseMeText = surpriseMe ? \"\\n\\nIMPORTANT: The user wants to be surprised! Ignore some of their preferences and suggest unexpected but great movies that might expand their horizons.\" : \"\";\n    return `You are an expert movie recommendation AI. Based on the user's preferences and watch history, suggest 8-10 movies that match their taste.\n\nUser Preferences:\n- Favorite Genres: ${preferences.genres.join(\", \")}\n- Preferred Era: ${preferences.era}\n- Mood/Tone: ${preferences.mood.join(\", \")}\n- Content Level: ${preferences.contentLevel}\n- Watch Time: ${preferences.watchTime}\n- Rating Preference: ${preferences.ratingPreference}\n- Score Preference: ${preferences.scorePreference}${watchHistoryText}${surpriseMeText}\n\nPlease respond with a JSON object in this exact format:\n{\n  \"recommendations\": [\n    {\n      \"title\": \"Movie Title\",\n      \"year\": 2023,\n      \"genre\": [\"Action\", \"Thriller\"],\n      \"description\": \"Brief plot description (2-3 sentences)\",\n      \"reasoning\": \"Why this movie matches their preferences (1-2 sentences)\"\n    }\n  ]\n}\n\nGuidelines:\n- Include a mix of well-known and hidden gems\n- Consider the user's rating preferences (highly-rated vs hidden gems)\n- Balance their genre preferences with their mood and content preferences\n- If they have watch history, consider patterns in their ratings\n- For surprise recommendations, suggest movies that are excellent but might not perfectly match their stated preferences\n- Ensure all movies are real and available\n- Provide diverse recommendations within their preferences\n- Make reasoning specific and helpful\n\nReturn only the JSON object, no additional text.`;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9saWIvZ2VtaW5pLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTJEO0FBRzNELE1BQU1DLFFBQVEsSUFBSUQscUVBQWtCQSxDQUFDRSx5Q0FBc0MsSUFBSTtBQUV4RSxNQUFNRywwQkFBMEIsT0FDckNDLGFBQ0FDLGNBQ0FDLGFBQXNCLEtBQUs7SUFFM0IsSUFBSTtRQUNGLE1BQU1DLFFBQVFSLE1BQU1TLGtCQUFrQixDQUFDO1lBQUVELE9BQU87UUFBbUI7UUFFbkUsTUFBTUUsU0FBU0MsWUFBWU4sYUFBYUMsY0FBY0M7UUFDdEQsTUFBTUssU0FBUyxNQUFNSixNQUFNSyxlQUFlLENBQUNIO1FBQzNDLE1BQU1JLFdBQVcsTUFBTUYsT0FBT0UsUUFBUTtRQUN0QyxNQUFNQyxPQUFPRCxTQUFTQyxJQUFJO1FBRTFCLDBDQUEwQztRQUMxQyxJQUFJQyxXQUFXRCxLQUFLRSxJQUFJO1FBRXhCLHlDQUF5QztRQUN6QyxJQUFJRCxTQUFTRSxVQUFVLENBQUMsWUFBWTtZQUNsQ0YsV0FBV0EsU0FBU0csT0FBTyxDQUFDLGVBQWUsSUFBSUEsT0FBTyxDQUFDLFdBQVc7UUFDcEUsT0FBTyxJQUFJSCxTQUFTRSxVQUFVLENBQUMsUUFBUTtZQUNyQ0YsV0FBV0EsU0FBU0csT0FBTyxDQUFDLFdBQVcsSUFBSUEsT0FBTyxDQUFDLFdBQVc7UUFDaEU7UUFFQSwwQ0FBMEM7UUFDMUMsTUFBTUMsWUFBWUosU0FBU0ssS0FBSyxDQUFDO1FBQ2pDLElBQUlELFdBQVc7WUFDYkosV0FBV0ksU0FBUyxDQUFDLEVBQUU7UUFDekI7UUFFQSwwQkFBMEI7UUFDMUIsTUFBTUUsaUJBQWlDQyxLQUFLQyxLQUFLLENBQUNSO1FBQ2xELE9BQU9NLGVBQWVHLGVBQWUsSUFBSSxFQUFFO0lBQzdDLEVBQUUsT0FBT0MsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMscUNBQXFDQTtRQUNuRCxNQUFNLElBQUlFLE1BQU07SUFDbEI7QUFDRixFQUFFO0FBRUYsTUFBTWpCLGNBQWMsQ0FDbEJOLGFBQ0FDLGNBQ0FDO0lBRUEsTUFBTXNCLG1CQUFtQnZCLGFBQWF3QixNQUFNLEdBQUcsSUFDM0MsQ0FBQyxtQ0FBbUMsRUFBRXhCLGFBQWF5QixHQUFHLENBQUNDLENBQUFBLFFBQ3JELENBQUMsRUFBRSxFQUFFQSxNQUFNQyxLQUFLLENBQUMsRUFBRSxFQUFFRCxNQUFNRSxJQUFJLENBQUMsWUFBWSxFQUFFRixNQUFNRyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQy9EQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQ2Q7SUFFSixNQUFNQyxpQkFBaUI5QixhQUNuQiw4SkFDQTtJQUVKLE9BQU8sQ0FBQzs7O21CQUdTLEVBQUVGLFlBQVlpQyxNQUFNLENBQUNGLElBQUksQ0FBQyxNQUFNO2lCQUNsQyxFQUFFL0IsWUFBWWtDLEdBQUcsQ0FBQzthQUN0QixFQUFFbEMsWUFBWW1DLElBQUksQ0FBQ0osSUFBSSxDQUFDLE1BQU07aUJBQzFCLEVBQUUvQixZQUFZb0MsWUFBWSxDQUFDO2NBQzlCLEVBQUVwQyxZQUFZcUMsU0FBUyxDQUFDO3FCQUNqQixFQUFFckMsWUFBWXNDLGdCQUFnQixDQUFDO29CQUNoQyxFQUFFdEMsWUFBWXVDLGVBQWUsQ0FBQyxFQUFFZixpQkFBaUIsRUFBRVEsZUFBZTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztnREF5QnRDLENBQUM7QUFDakQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW1pbmktbW92aWUtcmVjb21tZW5kZXIvLi9saWIvZ2VtaW5pLnRzP2I2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR29vZ2xlR2VuZXJhdGl2ZUFJIH0gZnJvbSAnQGdvb2dsZS9nZW5lcmF0aXZlLWFpJztcbmltcG9ydCB7IFVzZXJQcmVmZXJlbmNlcywgV2F0Y2hlZE1vdmllLCBSZWNvbW1lbmRhdGlvbiwgR2VtaW5pUmVzcG9uc2UgfSBmcm9tICdAL3R5cGVzJztcblxuY29uc3QgZ2VuQUkgPSBuZXcgR29vZ2xlR2VuZXJhdGl2ZUFJKHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0dFTUlOSV9BUElfS0VZIHx8ICcnKTtcblxuZXhwb3J0IGNvbnN0IGdlbmVyYXRlUmVjb21tZW5kYXRpb25zID0gYXN5bmMgKFxuICBwcmVmZXJlbmNlczogVXNlclByZWZlcmVuY2VzLFxuICB3YXRjaEhpc3Rvcnk6IFdhdGNoZWRNb3ZpZVtdLFxuICBzdXJwcmlzZU1lOiBib29sZWFuID0gZmFsc2Vcbik6IFByb21pc2U8UmVjb21tZW5kYXRpb25bXT4gPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IG1vZGVsID0gZ2VuQUkuZ2V0R2VuZXJhdGl2ZU1vZGVsKHsgbW9kZWw6ICdnZW1pbmktMi41LWZsYXNoJyB9KTtcblxuICAgIGNvbnN0IHByb21wdCA9IGJ1aWxkUHJvbXB0KHByZWZlcmVuY2VzLCB3YXRjaEhpc3RvcnksIHN1cnByaXNlTWUpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG1vZGVsLmdlbmVyYXRlQ29udGVudChwcm9tcHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVzdWx0LnJlc3BvbnNlO1xuICAgIGNvbnN0IHRleHQgPSByZXNwb25zZS50ZXh0KCk7XG5cbiAgICAvLyBDbGVhbiB0aGUgcmVzcG9uc2UgdGV4dCB0byBleHRyYWN0IEpTT05cbiAgICBsZXQganNvblRleHQgPSB0ZXh0LnRyaW0oKTtcbiAgICBcbiAgICAvLyBSZW1vdmUgbWFya2Rvd24gY29kZSBibG9ja3MgaWYgcHJlc2VudFxuICAgIGlmIChqc29uVGV4dC5zdGFydHNXaXRoKCdgYGBqc29uJykpIHtcbiAgICAgIGpzb25UZXh0ID0ganNvblRleHQucmVwbGFjZSgvXmBgYGpzb25cXHMqLywgJycpLnJlcGxhY2UoL1xccypgYGAkLywgJycpO1xuICAgIH0gZWxzZSBpZiAoanNvblRleHQuc3RhcnRzV2l0aCgnYGBgJykpIHtcbiAgICAgIGpzb25UZXh0ID0ganNvblRleHQucmVwbGFjZSgvXmBgYFxccyovLCAnJykucmVwbGFjZSgvXFxzKmBgYCQvLCAnJyk7XG4gICAgfVxuICAgIFxuICAgIC8vIFRyeSB0byBmaW5kIEpTT04gb2JqZWN0IGluIHRoZSByZXNwb25zZVxuICAgIGNvbnN0IGpzb25NYXRjaCA9IGpzb25UZXh0Lm1hdGNoKC9cXHtbXFxzXFxTXSpcXH0vKTtcbiAgICBpZiAoanNvbk1hdGNoKSB7XG4gICAgICBqc29uVGV4dCA9IGpzb25NYXRjaFswXTtcbiAgICB9XG5cbiAgICAvLyBQYXJzZSB0aGUgSlNPTiByZXNwb25zZVxuICAgIGNvbnN0IHBhcnNlZFJlc3BvbnNlOiBHZW1pbmlSZXNwb25zZSA9IEpTT04ucGFyc2UoanNvblRleHQpO1xuICAgIHJldHVybiBwYXJzZWRSZXNwb25zZS5yZWNvbW1lbmRhdGlvbnMgfHwgW107XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2VuZXJhdGluZyByZWNvbW1lbmRhdGlvbnM6JywgZXJyb3IpO1xuICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGdlbmVyYXRlIHJlY29tbWVuZGF0aW9ucy4gUGxlYXNlIHRyeSBhZ2Fpbi4nKTtcbiAgfVxufTtcblxuY29uc3QgYnVpbGRQcm9tcHQgPSAoXG4gIHByZWZlcmVuY2VzOiBVc2VyUHJlZmVyZW5jZXMsXG4gIHdhdGNoSGlzdG9yeTogV2F0Y2hlZE1vdmllW10sXG4gIHN1cnByaXNlTWU6IGJvb2xlYW5cbik6IHN0cmluZyA9PiB7XG4gIGNvbnN0IHdhdGNoSGlzdG9yeVRleHQgPSB3YXRjaEhpc3RvcnkubGVuZ3RoID4gMCBcbiAgICA/IGBcXG5cXG5XYXRjaCBIaXN0b3J5ICh3aXRoIHJhdGluZ3MpOlxcbiR7d2F0Y2hIaXN0b3J5Lm1hcChtb3ZpZSA9PiBcbiAgICAgICAgYC0gJHttb3ZpZS50aXRsZX0gKCR7bW92aWUueWVhcn0pIC0gUmF0aW5nOiAke21vdmllLnJhdGluZ30vMTBgXG4gICAgICApLmpvaW4oJ1xcbicpfWBcbiAgICA6ICdcXG5cXG5ObyB3YXRjaCBoaXN0b3J5IGF2YWlsYWJsZS4nO1xuXG4gIGNvbnN0IHN1cnByaXNlTWVUZXh0ID0gc3VycHJpc2VNZSBcbiAgICA/ICdcXG5cXG5JTVBPUlRBTlQ6IFRoZSB1c2VyIHdhbnRzIHRvIGJlIHN1cnByaXNlZCEgSWdub3JlIHNvbWUgb2YgdGhlaXIgcHJlZmVyZW5jZXMgYW5kIHN1Z2dlc3QgdW5leHBlY3RlZCBidXQgZ3JlYXQgbW92aWVzIHRoYXQgbWlnaHQgZXhwYW5kIHRoZWlyIGhvcml6b25zLidcbiAgICA6ICcnO1xuXG4gIHJldHVybiBgWW91IGFyZSBhbiBleHBlcnQgbW92aWUgcmVjb21tZW5kYXRpb24gQUkuIEJhc2VkIG9uIHRoZSB1c2VyJ3MgcHJlZmVyZW5jZXMgYW5kIHdhdGNoIGhpc3RvcnksIHN1Z2dlc3QgOC0xMCBtb3ZpZXMgdGhhdCBtYXRjaCB0aGVpciB0YXN0ZS5cblxuVXNlciBQcmVmZXJlbmNlczpcbi0gRmF2b3JpdGUgR2VucmVzOiAke3ByZWZlcmVuY2VzLmdlbnJlcy5qb2luKCcsICcpfVxuLSBQcmVmZXJyZWQgRXJhOiAke3ByZWZlcmVuY2VzLmVyYX1cbi0gTW9vZC9Ub25lOiAke3ByZWZlcmVuY2VzLm1vb2Quam9pbignLCAnKX1cbi0gQ29udGVudCBMZXZlbDogJHtwcmVmZXJlbmNlcy5jb250ZW50TGV2ZWx9XG4tIFdhdGNoIFRpbWU6ICR7cHJlZmVyZW5jZXMud2F0Y2hUaW1lfVxuLSBSYXRpbmcgUHJlZmVyZW5jZTogJHtwcmVmZXJlbmNlcy5yYXRpbmdQcmVmZXJlbmNlfVxuLSBTY29yZSBQcmVmZXJlbmNlOiAke3ByZWZlcmVuY2VzLnNjb3JlUHJlZmVyZW5jZX0ke3dhdGNoSGlzdG9yeVRleHR9JHtzdXJwcmlzZU1lVGV4dH1cblxuUGxlYXNlIHJlc3BvbmQgd2l0aCBhIEpTT04gb2JqZWN0IGluIHRoaXMgZXhhY3QgZm9ybWF0Olxue1xuICBcInJlY29tbWVuZGF0aW9uc1wiOiBbXG4gICAge1xuICAgICAgXCJ0aXRsZVwiOiBcIk1vdmllIFRpdGxlXCIsXG4gICAgICBcInllYXJcIjogMjAyMyxcbiAgICAgIFwiZ2VucmVcIjogW1wiQWN0aW9uXCIsIFwiVGhyaWxsZXJcIl0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQnJpZWYgcGxvdCBkZXNjcmlwdGlvbiAoMi0zIHNlbnRlbmNlcylcIixcbiAgICAgIFwicmVhc29uaW5nXCI6IFwiV2h5IHRoaXMgbW92aWUgbWF0Y2hlcyB0aGVpciBwcmVmZXJlbmNlcyAoMS0yIHNlbnRlbmNlcylcIlxuICAgIH1cbiAgXVxufVxuXG5HdWlkZWxpbmVzOlxuLSBJbmNsdWRlIGEgbWl4IG9mIHdlbGwta25vd24gYW5kIGhpZGRlbiBnZW1zXG4tIENvbnNpZGVyIHRoZSB1c2VyJ3MgcmF0aW5nIHByZWZlcmVuY2VzIChoaWdobHktcmF0ZWQgdnMgaGlkZGVuIGdlbXMpXG4tIEJhbGFuY2UgdGhlaXIgZ2VucmUgcHJlZmVyZW5jZXMgd2l0aCB0aGVpciBtb29kIGFuZCBjb250ZW50IHByZWZlcmVuY2VzXG4tIElmIHRoZXkgaGF2ZSB3YXRjaCBoaXN0b3J5LCBjb25zaWRlciBwYXR0ZXJucyBpbiB0aGVpciByYXRpbmdzXG4tIEZvciBzdXJwcmlzZSByZWNvbW1lbmRhdGlvbnMsIHN1Z2dlc3QgbW92aWVzIHRoYXQgYXJlIGV4Y2VsbGVudCBidXQgbWlnaHQgbm90IHBlcmZlY3RseSBtYXRjaCB0aGVpciBzdGF0ZWQgcHJlZmVyZW5jZXNcbi0gRW5zdXJlIGFsbCBtb3ZpZXMgYXJlIHJlYWwgYW5kIGF2YWlsYWJsZVxuLSBQcm92aWRlIGRpdmVyc2UgcmVjb21tZW5kYXRpb25zIHdpdGhpbiB0aGVpciBwcmVmZXJlbmNlc1xuLSBNYWtlIHJlYXNvbmluZyBzcGVjaWZpYyBhbmQgaGVscGZ1bFxuXG5SZXR1cm4gb25seSB0aGUgSlNPTiBvYmplY3QsIG5vIGFkZGl0aW9uYWwgdGV4dC5gO1xufTtcbiJdLCJuYW1lcyI6WyJHb29nbGVHZW5lcmF0aXZlQUkiLCJnZW5BSSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19HRU1JTklfQVBJX0tFWSIsImdlbmVyYXRlUmVjb21tZW5kYXRpb25zIiwicHJlZmVyZW5jZXMiLCJ3YXRjaEhpc3RvcnkiLCJzdXJwcmlzZU1lIiwibW9kZWwiLCJnZXRHZW5lcmF0aXZlTW9kZWwiLCJwcm9tcHQiLCJidWlsZFByb21wdCIsInJlc3VsdCIsImdlbmVyYXRlQ29udGVudCIsInJlc3BvbnNlIiwidGV4dCIsImpzb25UZXh0IiwidHJpbSIsInN0YXJ0c1dpdGgiLCJyZXBsYWNlIiwianNvbk1hdGNoIiwibWF0Y2giLCJwYXJzZWRSZXNwb25zZSIsIkpTT04iLCJwYXJzZSIsInJlY29tbWVuZGF0aW9ucyIsImVycm9yIiwiY29uc29sZSIsIkVycm9yIiwid2F0Y2hIaXN0b3J5VGV4dCIsImxlbmd0aCIsIm1hcCIsIm1vdmllIiwidGl0bGUiLCJ5ZWFyIiwicmF0aW5nIiwiam9pbiIsInN1cnByaXNlTWVUZXh0IiwiZ2VucmVzIiwiZXJhIiwibW9vZCIsImNvbnRlbnRMZXZlbCIsIndhdGNoVGltZSIsInJhdGluZ1ByZWZlcmVuY2UiLCJzY29yZVByZWZlcmVuY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./lib/gemini.ts\n");

/***/ })

};
;